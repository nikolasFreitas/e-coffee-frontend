{"version":3,"sources":["assets/images/coffee.svg","components/StyledBase/index.tsx","assets/index.ts","components/Nav/index.tsx","components/Footer/styles.ts","components/Footer/index.tsx","App/theme.tsx","components/Card/styles.ts","components/Card/index.tsx","components/Recommended/index.tsx","components/Recommended/hooks.ts","pages/Home/index.tsx","pages/Shop/index.tsx","pages/Cart/index.tsx","router/index.tsx","App/index.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","StyledBase","createGlobalStyle","Icons","require","Nav","className","href","src","width","height","alt","loading","StyledFooter","styled","footer","attrs","Footer","title","Theme","props","children","CardThumb","div","image","Card","card","subtitle","Recommended","cards","useState","useRecommendeds","renderList","useMemo","map","index","key","Home","Shop","Cart","BaseRoutes","basename","exact","path","component","App","StrictMode","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.6548cfbe.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/coffee.95a76351.svg\";","import { createGlobalStyle } from 'styled-components';\n\nexport const StyledBase = createGlobalStyle`\n  @import url('https://fonts.googleapis.com/css2?family=Roboto:ital,wght@0,100;0,700;1,400&display=swap');\n\n  * {\n    margin: 0;\n    padding: 0;\n    box-sizing:border-box;\n  }\n\n  body {\n    font-family: 'Roboto', Arial, 'Helvetica Neue', sans-serif;\n  }\n`;\n","export const Icons = {\n  'coffee-logo': require('./images/coffee.svg')\n};\n","import React from 'react';\nimport { Icons } from 'assets';\n\nexport const Nav = () => {\n  return (\n    <nav className=\"navbar navbar-dark bg-dark\">\n      <div className=\"container\">\n        <a className=\"navbar-brand\" href=\"/e-coffee-frontend\">\n          <img \n            src={Icons['coffee-logo']}\n            className=\"d-inline-block align-top\"\n            width=\"30\"\n            height=\"30\"\n            alt=\"E-coffee logo\"\n            loading=\"lazy\"\n          />\n          E-coffee\n        </a>\n        \n      </div>\n    </nav>\n  );\n};\n\n","import styled from 'styled-components';\n\nexport const StyledFooter = styled.footer.attrs({ className: 'bg-light' })`\n  min-height: 150px;\n`;\n","import React from 'react';\nimport { StyledFooter } from './styles';\n\nexport const Footer = () => {\n  return (\n    <StyledFooter>\n      <div className=\"container\">\n        <div>\n          <ul className=\"nav\">\n            <li className=\"item\"></li>\n          </ul>\n        </div>\n        <div className=\"text-center\">\n          <small>\n              Icons made by {' '}\n            <a href=\"https://www.flaticon.com/free-icon/coffee_1569602\" title=\"Kiranshastry\">Kiranshastry</a>{' '}\n              from <a href=\"https://www.flaticon.com/\" title=\"Flaticon\">www.flaticon.com</a>\n          </small>\n        </div>\n      </div>\n    </StyledFooter>\n  );\n};\n","import React, { PropsWithChildren } from 'react';\nimport { StyledBase } from 'components/StyledBase';\nimport { Nav } from 'components/Nav';\nimport { Footer } from 'components/Footer';\n\nconst Theme = (props: PropsWithChildren<{}>) => {\n  return (\n    <>\n      <Nav/>\n      <div className=\"container\">\n        {props?.children}\n      </div>\n      <Footer />\n      <StyledBase />\n    </>\n  );\n};\n\nexport default Theme;\n","import styled from 'styled-components';\n\nexport const CardThumb = styled.div<{ image: string }>`\n  width: 100%;\n  height: 25vh;\n  background-repeat: no-repeat;\n  background-image: ${ props => `url(${props.image})` };\n  background-position: center;\n  background-size: cover;\n\n  @media only screen and (max-width: 1200px) {\n    height: calc(25vh - 10vw);\n  }\n`;\n","import React from 'react';\nimport { Props } from '@comp/card';\nimport { CardThumb } from './styles';\n\nconst Card = (props: Props) => {\n  const { card: { title, subtitle } } = props;\n\n  return (\n    <div className=\"p-2\">\n      <CardThumb\n        image=\"https://via.placeholder.com/300x300\"\n      />\n      <div className=\"p-2\">\n        <h3>\n          <small>{title}</small>\n        </h3>\n        <p>\n          {subtitle}\n        </p>\n      </div>\n    </div>\n  );\n};\n\nexport default Card;\n","import React, { useMemo } from 'react';\nimport { useRecommendeds } from './hooks';\nimport Card from 'components/Card';\n\nexport const Recommended = () => {\n  const { cards } = useRecommendeds();\n\n  const renderList = useMemo(() => {\n    return cards.map((card, index) => (\n      <div key={index} className=\"col-12 col-sm-6 col-md-3\">\n        <Card card={card} />\n      </div>\n    ));\n  }, [ cards ]);\n\n  return (\n    <div className=\"content\">\n      <h2>Clients also viwed:</h2>\n      <div className=\"row\">\n        {renderList}\n      </div>\n    </div>\n  );\n};\n","import { useState } from 'react';\n\nimport { Card } from '@comp/card';\n\nexport const useRecommendeds = () => {\n  const card = {\n    title: 'Latte',\n    subtitle: 'Store: local://storeName City: Porto Alegre'\n  };\n  const [cards] = useState([card, card, card, card] as Card[]);\n\n  return {\n    cards\n  };\n};\n","import { Recommended } from 'components/Recommended';\nimport React from 'react';\n\nconst Home = () => {\n  return (\n    <>\n      <Recommended />\n    </>\n  );\n};\n\nexport default Home;\n","import Card from 'components/Card';\nimport React from 'react';\n\nconst Shop = () => {\n  const card = {\n    title: 'Searching for coffee?',\n    subtitle: 'We got every types of coffee and stores near you!'\n  }; \n\n  return (\n    <>\n      <Card card={card} />\n    </>\n  );\n};\n\nexport default Shop;\n","import React from 'react';\n\nconst Cart = () => {\n  return (\n    <>\n    </>\n  );\n};\n\nexport default Cart;\n","import React from 'react';\nimport { \n  BrowserRouter as Router,\n  Route,\n  Switch\n} from 'react-router-dom';\nimport Home from 'pages/Home';\nimport Shop from 'pages/Shop';\nimport Cart from 'pages/Cart';\n\nexport const BaseRoutes = () => {\n  return (\n    <Router basename={'e-coffee-frontend'}>\n      <Switch>\n        <Route exact path=\"/\" component={Home} />\n        <Route path=\"/shop/:shopId\" component={Shop} />\n        <Route path=\"/cart\" component={Cart} />\n      </Switch>\n    </Router>\n  );\n};\n","import React from 'react';\nimport Theme from './theme';\nimport { BaseRoutes } from 'router';\n\nconst App = () => {\n  return (\n    <React.StrictMode>\n      <Theme>\n        <BaseRoutes />\n      </Theme>\n    </React.StrictMode>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from 'App';\nimport * as serviceWorker from 'serviceWorker';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}